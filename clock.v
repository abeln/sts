From iris.base_logic.lib Require Import invariants.
From iris.program_logic Require Export weakestpre.
From iris.algebra Require Import auth excl.
From iris.heap_lang Require Import lang adequacy notation tactics proofmode.
From iris_string_ident Require Import ltac2_string_ident.

Definition clock_loop : val :=
  rec: "loop" "l" :=
    (if: !"l" = #23 then
      "l" <- #0
    else
      "l" <- !"l" + #1) ;;
    "loop" "l".

Definition clock : val :=
  Œª: <>,
    let: "l" := ref #0 in
    clock_loop "l".

Record clockSt := MkClock { hour: nat }.

Definition initSt := MkClock 0.

Definition nextSt (st : clockSt) : clockSt :=
  MkClock (st.(hour) + 1).

Lemma nextSt_plus1 (st : clockSt) :
  (nextSt st).(hour) = st.(hour) + 1.
Proof. reflexivity. Qed.

Inductive tick : relation clockSt :=
| tick_next st : st.(hour) < 23 -> tick st (nextSt st)
| tick_wrap st : st.(hour) = 23 -> tick st initSt.

Definition tick_star := rtc tick.

Definition valid_st (st : clockSt) : Prop := st.(hour) <= 23.

Lemma init_valid : valid_st initSt.
Proof. Admitted.

Lemma tick_preserves_validity st st':
  tick st st' -> valid_st st -> valid_st st'.
Proof. Admitted.

Lemma tick_star_preserves_validity st st':
  tick_star st st' -> valid_st st -> valid_st st'.
Proof. Admitted.

Lemma next_tick_star st :
  valid_st st ->
  tick_star initSt st ->
  hour st ‚â† 23 ->
  tick_star initSt (nextSt st).
Proof.
  intros Hvalid Hst Hne.
  eapply rtc_r; [eauto|].
  apply tick_next.
  unfold valid_st in Hvalid; lia.
Qed.

Section clock_specs.

  Context `{!heapG Œ£}.

  Notation HSO := (leibnizO clockSt).

  Context `{!inG Œ£ (authUR (optionUR (exclR HSO)))} (Œ≥st : gname).

  Definition StateAuth s := own Œ≥st (‚óè Excl' s).
  Definition StateFrag s := own Œ≥st (‚óØ Excl' s).

  Lemma State_agree s s' : StateAuth s ‚ä¢ StateFrag s' -‚àó ‚åús = s'‚åù.
  Proof.
    iIntros "H1 H2".
    iDestruct (own_valid_2 with "H1 H2") as
        %[->%Excl_included%leibniz_equiv ?]%auth_both_valid; done.
  Qed.

  Lemma State_update s1 s2 s :
    StateAuth s1 ‚ä¢ StateFrag s2 ==‚àó StateAuth s ‚àó StateFrag s.
  Proof.
    iIntros "H1 H2".
    iMod (own_update_2 _ _ _ (‚óè Excl' s ‚ãÖ ‚óØ Excl' s) with "H1 H2") as "[$ $]";
      last done.
    apply auth_update.
    apply option_local_update, exclusive_local_update; done.
  Qed.

  Definition invN := nroot.@"H".

  Definition clock_sts_invariant ‚Ñì : iProp Œ£ :=
    inv invN
        (‚àÉ s,
            StateAuth s ‚àó
            ‚åútick_star initSt s‚åù ‚àó
            ‚Ñì ‚Ü¶ #s.(hour)).

  Lemma clock_sts_state_valid ‚Ñì s E :
    ‚ÜëinvN ‚äÜ E ‚Üí
    clock_sts_invariant ‚Ñì ‚ä¢
      StateFrag s ={E}=‚àó StateFrag s ‚àó ‚åúvalid_st s‚åù.
  Proof.
    iIntros (HE) "#Hi Hsf".
    iInv invN as "> Hinv". iDestruct "Hinv" as (s') "(Hsa & %Htick & H‚Ñì)".
    iDestruct (State_agree with "Hsa Hsf") as %->.
    iModIntro; iFrame "Hsf".
    iSplitL.
    { iNext; iExists _; iFrame; done. }
    iModIntro; iPureIntro.
    eapply tick_star_preserves_validity; eauto.
    apply init_valid.
  Qed.

  Lemma silly n :
     n ‚â† 23 ->
     #n ‚â† #23.
  Proof. Admitted.

  Lemma clock_loop_spec (s : clockSt) ‚Ñì :
    {{{ clock_sts_invariant ‚Ñì ‚àó
        StateFrag s }}}
      clock_loop #‚Ñì
    {{{ RET #(); False }}}.
  Proof.
    iIntros (œï) "[#Hinv Hfrag] Hcont".
    rewrite /clock_loop.
    iL√∂b as "IH" forall (s).
    wp_pures.
    wp_bind (!_)%E.
    iInv invN as "> HI" "Hclose".
    iDestruct "HI" as (s1) "(Hsa & %Htick1 & H‚Ñì)".
    wp_load.
    iDestruct (State_agree with "Hsa Hfrag") as %->.
    iMod ("Hclose" with "[H‚Ñì Hsa]") as "_".
    { iNext. iExists s. iFrame. by iPureIntro. }
    iModIntro.
    destruct (decide (s.(hour) = 23)) as [->| Hne].
    - wp_pures. wp_bind (_ <- _)%E.
      iInv invN as "> HI" "Hclose".
      iDestruct "HI" as (s2) "(Hsa & %Htick2 & H‚Ñì)".
      wp_store.
      iMod (State_update _ _ initSt with "Hsa Hfrag") as "[Hia Hif]".
      iMod ("Hclose" with "[H‚Ñì Hia]") as "_".
      { iNext.
        iExists initSt. simpl.
        iFrame. eauto. }
      iModIntro.
      do 2 wp_pure _.
      by iApply ("IH" with "Hif").
    - wp_pures.
      rewrite /= bool_decide_eq_false_2 //; last first.
      { by apply silly. }
      wp_pures. wp_bind (! _)%E.
      iInv invN as "> HI" "Hclose".
      iDestruct "HI" as (s2) "(Hsa & _ & H‚Ñì)".
      wp_load.
      iDestruct (State_agree with "Hsa Hfrag") as %->.
      iMod ("Hclose" with "[H‚Ñì Hsa]") as "_".
      { iNext. iExists s. iFrame. by iPureIntro. }
      iModIntro.
      wp_pures.
      wp_bind (_ <- _)%E.
      iMod (clock_sts_state_valid with "Hinv Hfrag") as "[Hfrag %Hvalid]"; [done |].
      iInv invN as "> HI" "Hclose".
      iDestruct "HI" as (s3) "(Hsa & _ & H‚Ñì)".
      wp_store.
      iDestruct (State_agree with "Hsa Hfrag") as %->.
      iMod (State_update _ _ (nextSt s) with "Hsa Hfrag") as "[Hna Hnf]".
      iMod ("Hclose" with "[H‚Ñì Hna]") as "_".
      { iNext. iExists (nextSt s). rewrite nextSt_plus1.
        assert (Z.of_nat (hour s + 1)%nat = (hour s + 1)%Z) as ->; [by lia|].
        iFrame. iPureIntro.
        apply next_tick_star; auto. }
      iModIntro. do 2 wp_pure _.
      iApply ("IH" with "Hnf").
      done.
  Qed.
  
Open Scope Z.

Lemma Zeven_add_2 n : Z.even n -> Z.even (n + 2).
Proof.
  rewrite (ltac:(lia): n + 2 = Z.succ (Z.succ n))
          Z.even_succ_succ //.
Qed.

Section S.
  Context `{!heapG Œ£} `{!spawnG Œ£} (N : namespace).

  Lemma incr2_spec (‚Ñì: loc) :
    {{{ inv N (‚àÉ (x:Z), ‚Ñì ‚Ü¶ #x ‚àó ‚åúZ.even x‚åù)%I }}}
      incr2 #‚Ñì
    {{{ RET #(); True }}}.
  Proof.
    iIntros (œÜ) "#Hi HœÜ". iL√∂b as "IH".
    wp_lam. wp_bind (_ ||| _)%E. wp_pures.
    (* specification for the two threads *)
    iAssert (WP #‚Ñì <- ! #‚Ñì + #2 {{ _, True }})%I with "[Hi]" as "Ht".
    { wp_bind (!#‚Ñì)%E. iInv N as (x) ">[H‚Ñì %]" "Hclose". wp_load.
      iMod ("Hclose" with "[H‚Ñì]"). now eauto.
      iModIntro. wp_pures.
      iInv N as (x') ">[H‚Ñì %]" "Hclose". wp_store.
      iMod ("Hclose" with "[H‚Ñì]"); eauto.
      iNext. iExists (x+2). iFrame. eauto using Zeven_add_2. }
    iApply (wp_par (fun _ => ‚åúTrue‚åù)%I (fun _ => ‚åúTrue‚åù)%I);
      [ iApply "Ht" .. |].
    iIntros. iNext. wp_pures. iApply "IH". eauto.
  Qed.
End S.

Class heapPreG Œ£ := HeapPreG {
  heap_preG_iris :> invPreG Œ£;
  heap_preG_heap :> gen_heapPreG loc (option val) Œ£;
  heap_preG_inv_heap :> inv_heapPreG loc (option val) Œ£;
  heap_preG_proph :> proph_mapPreG proph_id (val * val) Œ£;
}.

Section S.
  Context (N: namespace).
  Context `{!spawnG Œ£}.
  Context `{heapPreG Œ£}.

  Lemma invariant_adequacy :
    forall (‚Ñì : loc) (œÉ1 œÉ2 : state) (es: list expr),
      let œÜ := (fun (œÉ: state) => ‚àÉ (x:Z),
                  heap œÉ !! ‚Ñì = Some (Some (#x)) ‚àß Z.even x) in
      rtc erased_step ([incr2 #‚Ñì], œÉ1) (es, œÉ2) ‚Üí
      œÜ œÉ1 ‚Üí
      œÜ œÉ2.
  Proof.
    intros * Hstep HœÉ1.
    pose proof (@incr2_spec Œ£) as S.

    pose proof (wp_invariance Œ£ heap_lang NotStuck) as L. cbn in L.
    specialize (L (incr2 #‚Ñì) œÉ1 es œÉ2 (œÜ œÉ2)).
    eapply L; eauto. intros Hinv Œ∫s. clear L.

    (* Allocate heap resources corresponding to (heap œÉ1) *)
    iMod (gen_heap_init (delete ‚Ñì (heap œÉ1))) as (Hheap) "HœÉ1".
    (* Also allocate the prophecy-related resources, that appear in the standard
       state interpretation in heapG_irisG (this is needed for things to match
       later on). *)
    iMod (proph_map_init Œ∫s (used_proph_id œÉ1)) as (Hproph) "Hpr1".

    iMod (inv_heap_init loc (option val)) as (Hi) ">Hi1".
    (* /!\ do not use 'pose proof', as [heapG_invG HeapŒ£] needs to
       stay convertible to Hinv for things to typecheck later on. *)
    set (HeapŒ£ := HeapG Œ£ Hinv Hheap Hi Hproph).

    (* Add ‚Ñì back to the heap, so that we get a corresponding points-to *)
    destruct HœÉ1 as [v1 [HœÉ1 E1]].
    iMod (gen_heap_alloc (delete ‚Ñì (heap œÉ1)) ‚Ñì (Some #v1) with "HœÉ1")
      as "(HœÉ1 & H‚Ñì & ?)".
    by rewrite lookup_delete.

    (* Allocate the same invariant as in [incr2_spec], so that we can feed it to
       [S] *)
    iPoseProof (@inv_alloc Œ£ Hinv N ‚ä§
      (‚àÉ (x:Z), ‚Ñì ‚Ü¶ #x ‚àó ‚åúZ.even x‚åù)%I with "[H‚Ñì]") as ">#HI".
    by iExists v1; eauto.

    rewrite insert_delete insert_id //.
    specialize (S HeapŒ£ spawnG0 N ‚Ñì (fun _ => True%I)).
    iPoseProof (S with "HI") as "S".

    iModIntro.

    (* /!\ this has to match exactly the state_interp of heapG_irisG *)
    iExists (fun œÉ ùúÖs _ =>
      gen_heap_ctx (heap œÉ) ‚àó proph_map_ctx ùúÖs (used_proph_id œÉ))%I.
    iExists (fun _ => True%I).
    iSplitL "HœÉ1 Hpr1"; [ by iFrame |].
    iSplitL "S". by iApply "S".
    iIntros "[Hheap ?]". iExists (‚ä§ ‚àñ ‚ÜëN).
    iInv N as (x) ">[H‚Ñì %]" "Hclose".
    iDestruct (gen_heap_valid with "Hheap H‚Ñì") as "%".
    iModIntro. iPureIntro. unfold œÜ. eauto.
  Qed.
End S.

Theorem invariant_adequacy' (‚Ñì : loc) (œÉ1 œÉ2 : state) (es: list expr) :
  let œÜ := (fun (œÉ: state) =>
              ‚àÉ (x:Z), heap œÉ !! ‚Ñì = Some (Some (#x)) ‚àß Z.even x) in
  œÜ œÉ1 ‚Üí
  rtc erased_step ([incr2 #‚Ñì], œÉ1) (es, œÉ2) ‚Üí
  œÜ œÉ2.
Proof.
  set (Œ£ := #[invŒ£; gen_heapŒ£ loc (option val); inv_heapŒ£ loc (option val); proph_mapŒ£ proph_id (val * val); spawnŒ£]).
  set (HG := HeapPreG Œ£ _ _ _ _).
  intros. eapply (@invariant_adequacy nroot Œ£); eauto.
  typeclasses eauto.
Qed.
